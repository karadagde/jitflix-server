package Jitflix.Jitflix.auth;import Jitflix.Jitflix.entity.pg.PlatformUser;import Jitflix.Jitflix.entity.pg.Role;import Jitflix.Jitflix.repository.pg.PlatformUserRepository;import Jitflix.Jitflix.service.JwtService;import lombok.RequiredArgsConstructor;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;@Service@RequiredArgsConstructorpublic class AuthService {    private final PlatformUserRepository repository;    private final PasswordEncoder passwordEncoder;    private final JwtService jwtService;    private final AuthenticationManager authenticationManager;    public AuthenticationResponse register(            RegistrationRequest registrationRequest) {        var user = new PlatformUser();        user.setFirstName(registrationRequest.getFirstName());        user.setLastName(registrationRequest.getLastName());        user.setEmail(registrationRequest.getEmail());        user.setHashedPassword(                passwordEncoder.encode(registrationRequest.getPassword()));        user.setLanguage(registrationRequest.getLanguage());        user.setCountry(registrationRequest.getCountry());        user.setRole(Role.USER);        repository.save(user);        var jwtToken = jwtService.generateToken(user);        return AuthenticationResponse.builder().token(jwtToken).build();    }    public AuthenticationResponse authenticate(            AuthenticationRequest authenticationRequest) {        System.out.println(authenticationRequest);        System.out.println(authenticationRequest.getEmail());        System.out.println(authenticationRequest.getPassword());        authenticationManager.authenticate(                new org.springframework.security.authentication.                        UsernamePasswordAuthenticationToken(                        authenticationRequest.getEmail(),                        authenticationRequest.getPassword()));        var user = repository.findPlatformUserByEmail(                authenticationRequest.getEmail());        System.out.println(user);        var jwtToken = jwtService.generateToken(user);        System.out.println(jwtToken);        return AuthenticationResponse.builder().token(jwtToken).build();    }}