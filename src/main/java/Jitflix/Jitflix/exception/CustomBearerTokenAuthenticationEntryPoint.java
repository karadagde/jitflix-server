package Jitflix.Jitflix.exception;import io.jsonwebtoken.ExpiredJwtException;import io.jsonwebtoken.MalformedJwtException;import io.jsonwebtoken.security.SignatureException;import jakarta.servlet.ServletException;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.security.core.AuthenticationException;import org.springframework.security.web.AuthenticationEntryPoint;import org.springframework.stereotype.Component;import org.springframework.web.servlet.HandlerExceptionResolver;import java.io.IOException;@Componentpublic class CustomBearerTokenAuthenticationEntryPoint implements        AuthenticationEntryPoint {    private final HandlerExceptionResolver resolver;    public CustomBearerTokenAuthenticationEntryPoint(            @Qualifier("handlerExceptionResolver")            HandlerExceptionResolver resolver) {        this.resolver = resolver;    }    @Override    public void commence(HttpServletRequest request,                         HttpServletResponse response,                         AuthenticationException authException) throws            IOException, ServletException {        Object exception = request.getAttribute("exception");        if (exception.equals("MalformedJwtException")) {            this.resolver.resolveException(request, response, null,                    new MalformedJwtException("Malformed token"));        } else if (exception.equals("SignatureException")) {            this.resolver.resolveException(request, response, null,                    new SignatureException("Signature incorrect"));        } else if (exception.equals("ExpiredJwtException")) {            this.resolver.resolveException(request, response, null,                    new ExpiredJwtException(null, null, "Token Expired"));        } else {            this.resolver.resolveException(request, response, null,                    authException);        }    }}