package Jitflix.Jitflix.exception;import io.jsonwebtoken.JwtException;import org.springframework.http.HttpStatus;import org.springframework.http.converter.HttpMessageNotReadableException;import org.springframework.security.authentication.AccountStatusException;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.InsufficientAuthenticationException;import org.springframework.security.core.AuthenticationException;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseStatus;import org.springframework.web.bind.annotation.RestControllerAdvice;import java.nio.file.AccessDeniedException;@RestControllerAdvicepublic class GlobalExceptionHandler {    @ExceptionHandler(            {UsernameNotFoundException.class, BadCredentialsException.class})    @ResponseStatus(HttpStatus.UNAUTHORIZED)    CustomErrorResponse handleAuthenticationException(Exception ex) {        return new CustomErrorResponse(false, HttpStatus.UNAUTHORIZED.value(),                "username or password is incorrect.", ex.getMessage());    }    @ExceptionHandler(AccountStatusException.class)    @ResponseStatus(HttpStatus.UNAUTHORIZED)    CustomErrorResponse handleAccountStatusException(            AccountStatusException ex) {        return new CustomErrorResponse(false, HttpStatus.UNAUTHORIZED.value(),                "User" +                " account is abnormal.", ex.getMessage());    }    @ExceptionHandler(JwtException.class)    @ResponseStatus(HttpStatus.UNAUTHORIZED)    CustomErrorResponse handleInvalidBearerTokenException(            JwtException ex) {        return new CustomErrorResponse(false, HttpStatus.UNAUTHORIZED.value(),                "The " +                "access token provided is expired, revoked, malformed, or invalid for other reasons.",                ex.getMessage());    }    @ExceptionHandler(AccessDeniedException.class)    @ResponseStatus(HttpStatus.FORBIDDEN)    CustomErrorResponse handleAccessDeniedException(AccessDeniedException ex) {        return new CustomErrorResponse(false, HttpStatus.FORBIDDEN.value(),                "No " +                "permission.", ex.getMessage());    }    @ExceptionHandler(NullPointerException.class)    @ResponseStatus(HttpStatus.NO_CONTENT)    CustomErrorResponse handleNullPointerException(NullPointerException ex) {        return new CustomErrorResponse(false, HttpStatus.NO_CONTENT.value(),                "No " +                "content.", ex.getMessage());    }    @ExceptionHandler(IllegalArgumentException.class)    @ResponseStatus(HttpStatus.BAD_REQUEST)    CustomErrorResponse handleIllegalArgumentException(            IllegalArgumentException ex) {        return new CustomErrorResponse(false, HttpStatus.BAD_REQUEST.value(),                "Bad " +                "request.", ex.getMessage());    }    @ExceptionHandler(InsufficientAuthenticationException.class)    @ResponseStatus(HttpStatus.UNAUTHORIZED)    CustomErrorResponse handleInsufficientAuthenticationException(            InsufficientAuthenticationException ex) {        return new CustomErrorResponse(false, HttpStatus.UNAUTHORIZED.value(),                "Insufficient authentication.", ex.getMessage());    }    @ExceptionHandler(AuthenticationException.class)    @ResponseStatus(HttpStatus.UNAUTHORIZED)    CustomErrorResponse handleAuthenticationException(            AuthenticationException ex) {        return new CustomErrorResponse(false, HttpStatus.UNAUTHORIZED.value(),                "Authentication failed.", ex.getMessage());    }    @ExceptionHandler(HttpMessageNotReadableException.class)    @ResponseStatus(HttpStatus.BAD_REQUEST)    CustomErrorResponse handleHttpMessageNotReadableException(            HttpMessageNotReadableException ex) {        return new CustomErrorResponse(false, HttpStatus.BAD_REQUEST.value(),                "Required request body is missing", ex.getMessage());    }    @ExceptionHandler(Exception.class)    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)    CustomErrorResponse handleOtherException(Exception ex) {        ex.getStackTrace();        System.out.println(ex);        return new CustomErrorResponse(false,                HttpStatus.INTERNAL_SERVER_ERROR.value(),                "A server internal error occurs.", ex.getMessage());    }}