package Jitflix.Jitflix.service;import io.jsonwebtoken.*;import io.jsonwebtoken.io.Decoders;import io.jsonwebtoken.security.Keys;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.stereotype.Service;import java.security.Key;import java.util.Date;import java.util.HashMap;import java.util.Map;import java.util.function.Function;@Servicepublic class JwtService {    @Value("${jwt.secret-key}")    private String SECRET_KEY;    @Value("${jwt.expiration}")    private long JWT_TOKEN_VALIDITY;    @Value("${jwt.refresh-token.expiration}")    private long JWT_REFRESH_TOKEN_VALIDITY;    public String extractUsername(String token) {        return extractClaim(token, Claims::getSubject);    }    public <T> T extractClaim(String token,                              Function<Claims, T> claimsResolver) {        final Claims claims = extractAllClaims(token);        return claimsResolver.apply(claims);    }    public String generateToken(UserDetails userDetails) {        return generateToken(new HashMap<>(), userDetails);    }    public String generateToken(Map<String, Object> extraClaims,                                UserDetails userDetails) {        return buildToken(extraClaims, userDetails, JWT_TOKEN_VALIDITY);    }    public String generateRefreshToken(UserDetails userDetails) {        return buildToken(new HashMap<>(), userDetails,                JWT_REFRESH_TOKEN_VALIDITY);    }    private String buildToken(Map<String, Object> extraClaims,                              UserDetails userDetails, long validity) {        return Jwts.builder()                .setClaims(extraClaims)                .setSubject(userDetails.getUsername())                .setIssuedAt(new java.util.Date(System.currentTimeMillis()))                .setExpiration(new java.util.Date(                        System.currentTimeMillis() + validity))                .signWith(getSignInKey(),                        io.jsonwebtoken.SignatureAlgorithm.HS256)                .compact();    }    public Boolean validateToken(String token, UserDetails userDetails) {        try {            final String username = extractUsername(token);            return (username.equals(userDetails.getUsername()) &&                    !isTokenExpired(token));        } catch (SecurityException | MalformedJwtException |                 UnsupportedJwtException | IllegalArgumentException e) {            throw new BadCredentialsException("Invalid credentials", e);        } catch (ExpiredJwtException ex) {            throw new ExpiredJwtException(ex.getHeader(),                    ex.getClaims(), "Token expired");        }    }    private boolean isTokenExpired(String token) {        return extractExpiration(token).before(new java.util.Date());    }    private Date extractExpiration(String token) {        return extractClaim(token, Claims::getExpiration);    }    private Claims extractAllClaims(String token) {        return Jwts.parserBuilder()                .setSigningKey(getSignInKey())                .build()                .parseClaimsJws(token)                .getBody();    }    private Key getSignInKey() {        byte[] keyBytes = Decoders.BASE64.decode(SECRET_KEY);        return Keys.hmacShaKeyFor(keyBytes);    }}